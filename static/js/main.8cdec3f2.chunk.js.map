{"version":3,"sources":["images/ARESx_Logo.png","pages/Members.js","pages/WriteUps.js","pages/Scores.js","components/Navbar.js","pages/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Container","styled","div","Name","h2","Description","p","Line","hr","Members","WriteUps","Scores","Navbar","useState","isOpen","setOpen","className","role","aria-label","aria-expanded","onClick","aria-hidden","activeClassName","to","image","require","Title","h1","Rank","Img","img","Home","rank","rank2","src","initial","duration","number","component","format","Math","floor","fps","Navigation","ul","App","path","exact","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+JAAAA,EAAOC,QAAU,IAA0B,wC,2kBCG3C,IAkBMC,EAAYC,IAAOC,IAAV,KAOTC,EAAOF,IAAOG,GAAV,KAMJC,EAAcJ,IAAOK,EAAV,KAIXC,EAAON,IAAOO,GAAV,KAKKC,EAxCC,kBACZ,kBAACT,EAAD,KACI,kBAACO,EAAD,MACA,kBAACJ,EAAD,oBACA,kBAACE,EAAD,8YAEA,kBAACE,EAAD,MACA,kBAACJ,EAAD,mBACA,kBAACE,EAAD,oVAEA,kBAACE,EAAD,MACA,kBAACJ,EAAD,gBACA,kBAACE,EAAD,kWAEA,kBAACE,EAAD,QCVOG,EAJE,kBACf,0CCEaC,EAJA,kBACX,uC,QCyCWC,EAxCA,WAAO,IAAD,EACSC,oBAAS,GADlB,mBACVC,EADU,KACFC,EADE,KAEjB,OACE,yBACEC,UAAU,oBACVC,KAAK,aACLC,aAAW,mBAEX,yBAAKF,UAAU,aACX,yBAAKA,UAAU,gBACX,uBACIC,KAAK,SACLD,UAAS,+BAA0BF,GAAU,aAC7CI,aAAW,OACXC,gBAAc,QACdC,QAAS,kBAAML,GAASD,KAExB,0BAAMO,cAAY,SAClB,0BAAMA,cAAY,SAClB,0BAAMA,cAAY,WAG1B,yBAAKL,UAAS,sBAAiBF,GAAU,cACrC,yBAAKE,UAAU,gBACX,kBAAC,IAAD,CAASA,UAAU,cAAcM,gBAAgB,YAAYC,GAAG,cAAhE,aAGA,kBAAC,IAAD,CAASP,UAAU,cAAcM,gBAAgB,YAAYC,GAAG,YAAhE,WAGA,kBAAC,IAAD,CAASP,UAAU,cAAcM,gBAAgB,YAAYC,GAAG,WAAhE,e,4hBC9BpB,IAAMC,EAAQC,EAAQ,IAmBhBzB,EAAYC,IAAOC,IAAV,KAMTwB,EAAQzB,IAAO0B,GAAV,KAMLC,EAAO3B,IAAOG,GAAV,KAOJyB,EAAM5B,IAAO6B,IAAV,KAKMC,EAzCF,WAAO,IAAD,EACSlB,mBAAS,KADlB,mBACRmB,EADQ,aAEWnB,mBAAS,KAFpB,mBAERoB,EAFQ,UAGf,OACI,kBAAC,EAAD,KACI,kBAACJ,EAAD,CAAKK,IAAKV,IACV,kBAACE,EAAD,cACA,kBAACE,EAAD,6BACyB,kBAAC,IAAD,CAAgBO,QAAS,IAAMC,SAAU,IAAMC,OAAQL,EAAMM,UAAU,OAAOC,OAAQC,KAAKC,MAAOC,IAAK,MAEhI,kBAACd,EAAD,0BACsB,kBAAC,IAAD,CAAgBO,QAAS,IAAKC,SAAU,IAAMC,OAAQJ,EAAOK,UAAU,OAAOC,OAAQC,KAAKC,MAAOC,IAAK,Q,0tBC8BzI,IAAM1C,EAAYC,IAAOC,IAAV,KAYTyC,EAAa1C,IAAO2C,GAAV,KA2BDC,EAtEf,WACE,OACE,kBAAC,EAAD,KACE,kBAAC,IAAD,KACE,kBAACF,EAAD,KACE,kBAAC,EAAD,OAEF,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOG,KAAK,SACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,cACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,YACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,WACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOC,OAAK,EAACD,KAAK,IAAIE,OAAQ,kBAAO,kBAAC,IAAD,CAAUzB,GAAG,aAClD,kBAAC,IAAD,CAAOuB,KAAK,KACV,kBAAC,EAAD,WC1BQG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASN,OACP,kBAAC,IAAMO,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8cdec3f2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ARESx_Logo.fbb3dd03.png\";","import React from 'react';\nimport styled from 'styled-components';\n\nconst Members = () => (\n    <Container>\n        <Line></Line>\n        <Name>MillenniumX</Name>\n        <Description>Greetings! You can call me MillenniumX, and I'm a high school student. I do bug bounty hunting, iOS development, astronomy and writing (mainly plays and poetry). I'm currently into web exploitation, but starting to learn a little about reverse engineering. I love CTFs due to their competitive yet friendly spirit, and in my free time you can find me listening to NF, Witt Lowry and Vaboh!</Description>\n        \n        <Line></Line>\n        <Name>R3N4SCITUR</Name>\n        <Description>I'm R3N4SCITUR and I'm here to learn from like minded people and have fun doing it. I have always been passionate about technology. I'm obtaining a BA in IT w/emphasis on cyber security. I enjoy CTFs because they are an almost impossible puzzle at first but as you take the time to break them down, you realize there is a solution.</Description>\n        \n        <Line></Line>\n        <Name>noobs3c</Name>\n        <Description>My name is Sofiane (aka noobs3c) and I'm a 19 year old French/Morrocan security researcher and bug hunter who lives in France. Currently, I'm a first year student in IT engineering and I hope to work in cybersecurity in the future! I'm practicing really frequently and really hard by playing multiple CTFs. I love to share resources with others!</Description>\n\n        <Line></Line>\n    </Container>\n);\n\nconst Container = styled.div`\n  left: 0;\n  position: absolute;\n  margin: 100px 30px;\n  width: 50%;\n`;\n\nconst Name = styled.h2`\n  font-size: 30px;\n  color: #af0000;\n  text-justify: inter-word;\n`;\n\nconst Description = styled.p`\n  font-size: 20px;\n`;\n\nconst Line = styled.hr`\n  border: 1px solid #af0000;\n`;\n\n\nexport default Members;","import React from 'react';\nimport styled from 'styled-components';\n\nconst WriteUps = () => (\n  <h2>Write Ups</h2>\n);\n\nexport default WriteUps;","import React from 'react';\n\nconst Scores = () => (\n    <h2>Scores</h2>\n);\n\nexport default Scores;","import React, { useState } from \"react\";\nimport styled from 'styled-components';\nimport { NavLink } from \"react-router-dom\";\n\nconst Navbar = () => {\n    const [isOpen, setOpen] = useState(false);\n    return ( \n      <nav\n        className=\"navbar is-primary\"\n        role=\"navigation\"\n        aria-label=\"main navigation\"\n      >\n        <div className=\"container\">\n            <div className=\"navbar-brand\">\n                <a\n                    role=\"button\"\n                    className={`navbar-burger burger ${isOpen && \"is-active\"}`}\n                    aria-label=\"menu\"\n                    aria-expanded=\"false\"\n                    onClick={() => setOpen(!isOpen)}\n                >\n                    <span aria-hidden=\"true\"></span>\n                    <span aria-hidden=\"true\"></span>\n                    <span aria-hidden=\"true\"></span>\n                </a>\n            </div>\n            <div className={`navbar-menu ${isOpen && \"is-active\"}`}>\n                <div className=\"navbar-start\">\n                    <NavLink className=\"navbar-item\" activeClassName=\"is-active\" to=\"/write_ups\">\n                        Write Ups\n                    </NavLink>\n                    <NavLink className=\"navbar-item\" activeClassName=\"is-active\" to=\"/members\">\n                        Members\n                    </NavLink>\n                    <NavLink className=\"navbar-item\" activeClassName=\"is-active\" to=\"/scores\">\n                        Scores\n                    </NavLink>\n                </div>\n            </div>\n        </div>\n      </nav>\n    );\n};\n   \nexport default Navbar;","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport AnimatedNumber from '@jhonnold/react-animated-number';\n\nconst image = require('../images/ARESx_Logo.png');\n\nconst Home = () => {\n    const [rank, setRank] = useState(247);\n    const [rank2, setRank2] = useState(38);\n    return (\n        <Container>\n            <Img src={image}/>\n            <Title>ARESx</Title>\n            <Rank>\n                CTFTime Global Rank: <AnimatedNumber initial={1000} duration={2000} number={rank} component=\"span\" format={Math.floor} fps={20} />\n            </Rank>\n            <Rank>\n                CTFTime USA Rank: <AnimatedNumber initial={500} duration={2000} number={rank2} component=\"span\" format={Math.floor} fps={20} />\n            </Rank>\n        </Container>\n    )\n};\n\nconst Container = styled.div`\n  justify-content: center;\n  align-items: center;\n  \n`;\n\nconst Title = styled.h1`\n  font-size: 50px;\n  margin: 0;\n  text-align: center;\n`;\n\nconst Rank = styled.h2`\n  margin: 20px 0 0 0;\n  text-transform: uppercase;\n  color: #af0000;\n  text-align: center;\n`;\n\nconst Img = styled.img`\n  width: 300px;\n  margin: 0 0 20px 0;\n`;\n\nexport default Home;","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport {\n  BrowserRouter as Router,\n  Redirect,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport Members from './pages/Members';\nimport WriteUps from './pages/WriteUps';\nimport Scores from './pages/Scores';\nimport Navbar from './components/Navbar';\nimport Home from './pages/Home';\n\nconst TEAM_ID = '128734';\n\nfunction App() {\n  return (\n    <Container>\n      <Router>\n        <Navigation>\n          <Navbar />\n        </Navigation>\n        <Switch>\n          <Route path='/home'>\n            <Home />\n          </Route>\n          <Route path=\"/write_ups\">\n            <WriteUps />\n          </Route>\n          <Route path=\"/members\">\n            <Members />\n          </Route>\n          <Route path=\"/scores\">\n            <Scores />\n          </Route>\n          <Route exact path=\"/\" render={() => (<Redirect to=\"/home\" />)} />\n          <Route path='*'>\n            <Home />\n          </Route>\n        </Switch>\n      </Router>\n      \n    </Container>\n  );\n}\n\nconst Container = styled.div`\n  position: absolute;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  height: 100%;\n  width: 100%;\n  color: red;\n  background-color: black;\n`;\n\nconst Navigation = styled.ul`\n  position: absolute;\n  top: 0;\n  width: 100%;\n  justify-content: center;\n  display: flex;\n  text-transform: uppercase;\n  list-style: none;\n  margin: 50px;\n  padding: 0;\n\n  .navbar-item {\n    margin: 0 20px;\n  }\n\n  a {\n    color: inherit;\n    font-size: 30px;\n    text-decoration: none;\n    transition: color 0.2s ease-in-out;\n  }\n\n  a:hover {\n    color: #af0000;\n  }\n`;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}